<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C# on DSkrzypiec Blog</title>
    <link>https://dskrzypiec.dev/tags/c#/</link>
    <description>Recent content in C# on DSkrzypiec Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 22 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://dskrzypiec.dev/tags/c#/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Iterators in C#</title>
      <link>https://dskrzypiec.dev/iterators/</link>
      <pubDate>Thu, 22 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://dskrzypiec.dev/iterators/</guid>
      <description>Intro Main goal of this post is to present how iterators actually works in C#. In particular we will take a look on IL (Intermediate Language) generated by the compiler to check out what is really going on.
But first let&amp;rsquo;s start from loosely stated definition of iterators in C#. An iterator is a method or property which returns IEnumerable&amp;lt;T&amp;gt; or IEnumerator&amp;lt;T&amp;gt; and uses yield return or yield break contextual keywords.</description>
    </item>
    
  </channel>
</rss>

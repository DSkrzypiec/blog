<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C# on DSkrzypiec Blog</title>
    <link>https://dskrzypiec.dev/tags/c#/</link>
    <description>Recent content in C# on DSkrzypiec Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 14 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://dskrzypiec.dev/tags/c#/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Parsing T-SQL</title>
      <link>https://dskrzypiec.dev/parsing-tsql/</link>
      <pubDate>Sun, 14 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://dskrzypiec.dev/parsing-tsql/</guid>
      <description>Intro Once I&amp;rsquo;ve tried to implement auto formatter for T-SQL. To make this there seems to be two ways. The first and easier one is to implement sets of rules to transform text file without any context. The other one is to base on AST of T-SQL and use its context to apply formatting. The first case seems to be easier at the beginning and can be gradually extended but it&amp;rsquo;s really hard and dirty to include all of the cases without the knowledge of the context.</description>
    </item>
    
    <item>
      <title>Bloom filter</title>
      <link>https://dskrzypiec.dev/bloom-filter/</link>
      <pubDate>Fri, 08 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://dskrzypiec.dev/bloom-filter/</guid>
      <description>Intro At one of mine job interviews I was asked how would I check if there is a user name in continues stream of data without possibility of storing data on the disc. I had a good intuition but I didn&amp;rsquo;t expected that probabilistic answer would be sufficient and I haven&amp;rsquo;t ever heard about Bloom filters to that point.
Bloom filter is a data structure. It exists to help answer the question &amp;ldquo;Does this element (probably) exist in the set?</description>
    </item>
    
    <item>
      <title>Iterators in C#</title>
      <link>https://dskrzypiec.dev/iterators/</link>
      <pubDate>Thu, 22 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://dskrzypiec.dev/iterators/</guid>
      <description>Intro Main goal of this post is to present how iterators actually works in C#. In particular we will take a look on IL (Intermediate Language) generated by the compiler to check out what is really going on.
But first let&amp;rsquo;s start from loosely stated definition of iterators in C#. An iterator is a method or property which returns IEnumerable&amp;lt;T&amp;gt; or IEnumerator&amp;lt;T&amp;gt; and uses yield return or yield break contextual keywords.</description>
    </item>
    
  </channel>
</rss>

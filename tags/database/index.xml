<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>database on DSkrzypiec Blog</title>
    <link>https://dskrzypiec.dev/tags/database/</link>
    <description>Recent content in database on DSkrzypiec Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 26 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://dskrzypiec.dev/tags/database/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Home App v2 - rewritten in Go</title>
      <link>https://dskrzypiec.dev/home-app-go/</link>
      <pubDate>Sat, 26 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://dskrzypiec.dev/home-app-go/</guid>
      <description>Intro Two years ago I&amp;rsquo;ve introduced Home Database with corresponding Home App written in ASP.NET Core MVC (C#). The original idea was to have a database for keeping very personal documents and other data related to me, my home and my family. More about motivations can be found in the linked post about Home Database.
In case if you want to explore dev version of Home App before reading this post, you can visit</description>
    </item>
    
    <item>
      <title>Implementing SQLite parser in Scala</title>
      <link>https://dskrzypiec.dev/sqlite-parser/</link>
      <pubDate>Wed, 26 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://dskrzypiec.dev/sqlite-parser/</guid>
      <description>Intro About a year ago I&amp;rsquo;ve played a bit with parsing T-SQL. At the time I&amp;rsquo;ve used Microsoft library and ANTLR for generating lexer and parser based on predefined T-SQL grammar. Recently I&amp;rsquo;ve come back to this topic. I&amp;rsquo;ve implemented SQLite parser almost from scratch (without code generation).
&amp;hellip;, but why? In general I wanted to have a SQL parser in order to build some kind of static analyzer tool for SQL and databases.</description>
    </item>
    
    <item>
      <title>Parsing T-SQL</title>
      <link>https://dskrzypiec.dev/parsing-tsql/</link>
      <pubDate>Sun, 14 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://dskrzypiec.dev/parsing-tsql/</guid>
      <description>Intro Once I&amp;rsquo;ve tried to implement auto formatter for T-SQL. To make this there seems to be two ways. The first and easier one is to implement sets of rules to transform text file without any context. The other one is to base on AST of T-SQL and use its context to apply formatting. The first case seems to be easier at the beginning and can be gradually extended but it&amp;rsquo;s really hard and dirty to include all of the cases without the knowledge of the context.</description>
    </item>
    
    <item>
      <title>Home Server</title>
      <link>https://dskrzypiec.dev/home-server/</link>
      <pubDate>Sun, 06 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://dskrzypiec.dev/home-server/</guid>
      <description>Intro I&amp;rsquo;ve finally setup my own server. It&amp;rsquo;s great and I regret I haven&amp;rsquo;t done it earlier. This post will be about my thoughts and experiences on setting up a home server.
In my case a server is just a Raspberry Pi 4B so it&amp;rsquo;s not a typical server with over 40 CPU cores and over 256 GB of RAM but technically it&amp;rsquo;s still a server and it&amp;rsquo;s enough for my use.</description>
    </item>
    
    <item>
      <title>Home Database</title>
      <link>https://dskrzypiec.dev/home-db/</link>
      <pubDate>Wed, 11 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dskrzypiec.dev/home-db/</guid>
      <description>Intro Last month after my daughter was born we&amp;rsquo;ve received a bunch of documents in this matter. Birth certificate, medical papers, assignment of PESEL, etc. When I was about to put those papers into document folders I thought it&amp;rsquo;s time for digitalization.
Most of our very important documents like mortgage papers or university diplomas exist only in physical version without any copy either digital or physical. We had plans to scan or at least make photos of those but we didn&amp;rsquo;t do it.</description>
    </item>
    
    <item>
      <title>Go database/sql vs jmoiron/sqlx reading benchmark</title>
      <link>https://dskrzypiec.dev/gosqlstdsqlx/</link>
      <pubDate>Thu, 05 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://dskrzypiec.dev/gosqlstdsqlx/</guid>
      <description>Intro While building most of projects or apps it is very common to read from a database. In go standard way to do that is by using database/sql standard library. To illustrate how it can be done let&#39;s load from database a bunch of Points which are slice of Points defined as follows
 type Point struct { X int Y float64 } type Points []Point  Next listening contains definition of function ReadPoints which for existing *sql.</description>
    </item>
    
  </channel>
</rss>

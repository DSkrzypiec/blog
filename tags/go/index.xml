<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on DSkrzypiec Blog</title>
    <link>https://dskrzypiec.dev/tags/go/</link>
    <description>Recent content in Go on DSkrzypiec Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 23 Dec 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://dskrzypiec.dev/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>New Scheduler</title>
      <link>https://dskrzypiec.dev/new-scheduler/</link>
      <pubDate>Sat, 23 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://dskrzypiec.dev/new-scheduler/</guid>
      <description>Intro I&amp;rsquo;ve started implementing yet another DAG scheduler, something like Airflow or Luigi. This post is going to be on why I&amp;rsquo;m doing this and what I&amp;rsquo;m trying to achieve.
Before we start, let me do a short introduction to schedulers, in case you&amp;rsquo;ve never heard about it or use it yourself. What in here I&amp;rsquo;m calling scheduler is a program or software system which is responsible for scheduling execution of tasks or another programs in particular order.</description>
    </item>
    
    <item>
      <title>Getting method&#39;s source code in Go</title>
      <link>https://dskrzypiec.dev/go-ast/</link>
      <pubDate>Mon, 21 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://dskrzypiec.dev/go-ast/</guid>
      <description>Intro Recently I thought I want to have a function, implemented in Go, which would return method&amp;rsquo;s source code for given type and method name in the runtime. Something of this signature:
func MethodBodySource(typeName, methodName string) (*ast.BlockStmt, string, error) { ... } This function would return found function body AST (which in Go is block statement), it&amp;rsquo;s source code as string and possibly an error.
In dynamically typed and interpreted languages this is a foundation functionality.</description>
    </item>
    
    <item>
      <title>Home App v2 - rewritten in Go</title>
      <link>https://dskrzypiec.dev/home-app-go/</link>
      <pubDate>Sat, 26 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://dskrzypiec.dev/home-app-go/</guid>
      <description>Intro Two years ago I&amp;rsquo;ve introduced Home Database with corresponding Home App written in ASP.NET Core MVC (C#). The original idea was to have a database for keeping very personal documents and other data related to me, my home and my family. More about motivations can be found in the linked post about Home Database.
In case if you want to explore dev version of Home App before reading this post, you can visit</description>
    </item>
    
    <item>
      <title>Mocking a file system in Go</title>
      <link>https://dskrzypiec.dev/mock-go-filesystem/</link>
      <pubDate>Sat, 03 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dskrzypiec.dev/mock-go-filesystem/</guid>
      <description>src  config  config.go config_test.go reloader.go   dir  dir.go dir_test.go dirCompare.go dirCompare_test.go hash.go listener.go   loop  mainLoop.go   main.go   readme.md   Intro In this post we&amp;rsquo;ll try to mock some features of a file system in Go. We&amp;rsquo;ll focus mainly on file tree structure instead on IO operations on files itself. If you are interested in full abstract file system for Go check out afero package.</description>
    </item>
    
    <item>
      <title>Writing a blog on smartphone</title>
      <link>https://dskrzypiec.dev/smartphone/</link>
      <pubDate>Mon, 24 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dskrzypiec.dev/smartphone/</guid>
      <description>Intro Nowadays smartphones are basically a pocket computers. Smartphone hardware evolution is very rapid. I was in a situation where my middle-tier phone was better than my current laptop. Could smartphone be used for programming in that case? The answer is yes but is it actual feasible? In this post we&amp;rsquo;ll focus on implementing a blog on a Android smartphone.
I&amp;rsquo;ve been using my smartphone to play with C++, Go, Vim and practice UNIX programs like AWK and grep for quite some time now.</description>
    </item>
    
    <item>
      <title>Go database/sql vs jmoiron/sqlx reading benchmark</title>
      <link>https://dskrzypiec.dev/gosqlstdsqlx/</link>
      <pubDate>Thu, 05 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://dskrzypiec.dev/gosqlstdsqlx/</guid>
      <description>Intro While building most of projects or apps it is very common to read from a database. In go standard way to do that is by using database/sql standard library. To illustrate how it can be done let&#39;s load from database a bunch of Points which are slice of Points defined as follows
 type Point struct { X int Y float64 } type Points []Point  Next listening contains definition of function ReadPoints which for existing *sql.</description>
    </item>
    
    <item>
      <title>What the quantile really is?</title>
      <link>https://dskrzypiec.dev/quantiles/</link>
      <pubDate>Fri, 23 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://dskrzypiec.dev/quantiles/</guid>
      <description>Intro For few years when I was practicing data science I&#39;ve used quantiles a lot. I knew what it is and when one should use it. I knew mathematical definition and intuition around quantiles but if someone would ask me to implement it from scratch I wouldn&#39;t know how to do it right away.
So what is a quantile? It&#39;s a one of most commonly used descriptive statistic. It gives us aggregated information about sample&#39;s distribution.</description>
    </item>
    
  </channel>
</rss>

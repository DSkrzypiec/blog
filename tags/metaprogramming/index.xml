<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>metaprogramming on DSkrzypiec Blog</title>
    <link>https://dskrzypiec.dev/tags/metaprogramming/</link>
    <description>Recent content in metaprogramming on DSkrzypiec Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 21 Aug 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://dskrzypiec.dev/tags/metaprogramming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting mathod&#39;s source code in Go</title>
      <link>https://dskrzypiec.dev/go-ast/</link>
      <pubDate>Mon, 21 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://dskrzypiec.dev/go-ast/</guid>
      <description>Intro Recently I thought I want to have a function, implemented in Go, which would return method&amp;rsquo;s source code for given type and method name in the runtime. Something of this signature:
func MethodBodySource(typeName, methodName string) (*ast.BlockStmt, string, error) { ... } This function would return found function body AST (which in Go is block statement), it&amp;rsquo;s source code as string and possibly an error.
In dynamically typed and interpreted languages this is a foundation functionality.</description>
    </item>
    
  </channel>
</rss>
